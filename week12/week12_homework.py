"""
36. 電路II
模擬一個數位IC，內有回饋電路與紀錄器電路。
輸入N 是二進位 8 位元，輸出是二進位 12 位元。
輸入範圍從 00000000 到 11111111 (十進位 0~255)
數位IC內有一個回饋電路,回饋方式:
C(N) = N 當 N(十進位) 為 0 或 N為 1 時
C(N) = C(N/2) 當 N(十進位) 為偶數
C(N) = C((N+1)/2) 當 N(十進位) 為奇數
數位IC內有一個紀錄器 R，會記錄回饋電路的回饋次數。
R(N) = [C(N) 的回饋次數]。例如 N=00001010 (十進位 10)，
即 C(10)= C(5)=C(3)=C(2)=C(1)=1，則 R(10) = 4，共回饋 4 次。
此電路另有一個紀錄器 T，會加總所跑過的0~N次電路回饋次數，
即 T(N) = R(0) + R(1) +...+ R(N)。
以二進位制輸出所有回饋次數加總後的結果。
例如 T(10) = R(0)+R(1)+R(2)+R(3)+R(4)+...+R(10) = 000000011001(十進位為 25)。
當輸入為 -1時，則結束執行。
例如：
00000011
-1
輸出為：
000000000011
--------------------------------------------------------------------------------------------------------------
輸入說明:
第一行輸入第一個測試案例資料(二進位 8 bit 位元)
第二行輸入第二個測試案例資料(二進位 8 bit 位元)
....
最後 -1 結束
輸出說明:
每一行輸出一個測試案例資料的結果(二進位 12 bit 位元)。
--------------------------------------------------------------------------------------------------------------
輸入範例 1：
00000000
11111111
10101010
-1
輸出範例 1：
000000000000
011011111001
010001010001
--------------------------------------------------------------------------------------------------------------
輸入範例 2：
00000000
10010110
11111111
-1
輸出範例 2：
000000000000
001110110001
011011111001
--------------------------------------------------------------------------------------------------------------
輸入範例 3：
10101010
01010101
01100110
10010011
01110010
-1
輸出範例 3：
010001010001
000111010100
001001001011
001110011001
001010011111
"""
import math
def turnTwelve(n):
    ans = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    for i in range(11, -1, -1):
        if n - (2 ** i) >= 0:
            n -= (2 ** i)
            ans[12 - (i + 1)] = 1
    print(*ans, sep='')

def feedback(n):
    time = 0
    if n == 0 or n == 1:
        return time
    while n != 1:
        if n % 2 == 0:
            n /= 2
            time += 1
        elif n % 2 != 0:
            n = (n + 1) / 2
            time += 1
    return time

def convertTen(s):
    sumNum = 0
    for i in range(len(s), 0, -1):
        if s[i - 1:i] == '1':
            sumNum += 2 ** (len(s) - i)
    return sumNum

def myElectric():
    electricList = []
    while True:
        n = input()
        if n == '-1':
            break
        electricList.append(n)

    for i in electricList:
        pre_turn = 0
        num = convertTen(i)
        for j in range(0, num + 1):
            pre_turn += feedback(j)
        turnTwelve(pre_turn)

"""
37.貨倉理貨
有一個物流公司總共有 N 個貨物(1 <= N <= 150)，貨物的編號方式為1~N，其倉庫中有M個木棧板( 1 <= M <= 15 )，倉庫中理貨方式如下方的敘述：
1.即將放置在木棧板上的貨物編號，須與當前木棧板上最頂端的貨物編號相加要為平方數。
2.以有貨物的木棧板優先放置。若不符合規則1.，才能放置於空的木棧板上。
3.若貨物放置於木棧板時，無法符合上述 1、2兩個條件，則表示倉庫已達置物上限。
請計算所有貨物是否能被倉庫容納，
如果所有貨物皆放置於倉庫中且未達置物上限，
則輸出"True"，並輸出排序後每個木棧板上的貨物編號，
如果倉庫已達置物上限，且還有貨物尚未放置於倉庫中，
則輸出"False"，不需輸出貨物編號。
輸出貨物編號的排序方式：
單個木棧板上的貨物編號排序，由貨物編號以升序進行排序，
所有木棧板排序方式，依照木棧板上的貨物編號數量由少排到多，
若貨物編號數量相同，則依序比對單個木棧板裡的貨物編號，以數字小的優先輸出。
例如：
7
3
輸出為：
True
2 7
4 5
1 3 6
以上方輸入為例：
第一個木棧板上的貨物編號為：1 3 6
第二個為：2 7
第三個為：4 5
經過排序後的輸出應為：
2 7
4 5
1 3 6
--------------------------------------------------------------------------------------------------------------
輸入說明：
第一行輸入一個數字N ( 1 <= N <= 150)，表示有多少個貨物數量。
第二行輸入一個數字M ( 1 <= M <= 15 )，表示有多少個木棧板 。
輸出說明：
若可以將所有貨物放置於木棧板上，輸出方式為：
第一行輸出"True"。
第二行後輸出排序後木棧板上的貨物編號。
若無法將所有貨物放置於木棧板上，則輸出"False"。
-------------------------------------------------------------------------------------------------------------
輸入範例 1：
7
3
輸出範例 1：
True
2 7
4 5
1 3 6
--------------------------------------------------------------------------------------------------------------
輸入範例 2：
150
15
輸出範例 2：
False
--------------------------------------------------------------------------------------------------------------
輸入範例 3：
10
10
輸出範例 3：
True
8
4 5
2 7 9
1 3 6 10
--------------------------------------------------------------------------------------------------------------
輸入範例 4：
127
15
輸出範例 4：
True
98 127
112 113
72 97 99 126
84 85 111 114
50 71 73 96 100 125
60 61 83 86 110 115
32 49 51 70 74 95 101 124
40 41 59 62 82 87 109 116
18 31 33 48 52 69 75 94 102 123
24 25 39 42 58 63 81 88 108 117
8 17 19 30 34 47 53 68 76 93 103 122
12 13 23 26 38 43 57 64 80 89 107 118
2 7 9 16 20 29 35 46 54 67 77 92 104 121
4 5 11 14 22 27 37 44 56 65 79 90 106 119
1 3 6 10 15 21 28 36 45 55 66 78 91 105 120
--------------------------------------------------------------------------------------------------------------
"""



def sortByLen(e):
    return len(e)

def sortByFirst(e):
    return e[0]

def sortShelf(totalShelf):
    totalShelf.sort(key=sortByFirst)
    totalShelf.sort(key=sortByLen)
    for i in totalShelf:
        for j in i:
            print(j,end=' ')
        print()

def checkSquare(origin, newNum):
    x = int(math.sqrt(origin + newNum))
    return x * x == (origin + newNum)

def putOnShelf(cargoNum, maxNum):
    totalShelf = []
    for i in range(1, cargoNum + 1):
        tmpCargoList = []
        if len(totalShelf) == 0:
            tmpCargoList.append(i)
            totalShelf.append(tmpCargoList)
        else:
            # [[1]] <-- [2]
            flag = 1
            for eachShelf in totalShelf:
                lastItem = eachShelf[len(eachShelf) - 1]
                if checkSquare(lastItem, i):
                    eachShelf.append(i)
                    flag = -1
                    break
            if flag > 0:
                tmpCargoList.append(i)
                totalShelf.append(tmpCargoList)
            if len(totalShelf) > maxNum:
                print('False')
                return []
    return totalShelf

def myCargo():
    cargoNum = int(input())
    woodPlate = int(input())
    totalShelf = putOnShelf(cargoNum, woodPlate)
    if len(totalShelf) != 0:
        print('True')
        sortShelf(totalShelf)

if __name__ == '__main__':
    # myElectric()
    myCargo()
