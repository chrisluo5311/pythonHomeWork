"""
29. 串列數字排序
給定一個整數M (1 <= M <= 10)，代表接下來要輸入M個整數，並且M個整數的值可以重複
接下來M個輸入，每次輸入一個整數N，N的數值範圍為 1 <= N <= 1000
針對這M個整數，需採取以下規則：
1. 先將這Ｍ個整數加入List中
2. 奇數放於 List 的左側
3. 偶數放於 List 的右側
4. 左側的奇數需按照數值大小，由小到大排序
5. 右側的偶數需按照數值大小，由大到小排序
最後輸出List排序後的結果，元素之間以一個空格隔開
若M不在[1, 10]內，則輸出ERROR並直接結束程式，不須等待輸入N。
若N不在[1, 1000]內，則輸出ERROR並直接結束程式。
例如：
9
1
2
3
4
5
6
7
8
9
輸出為：
1 3 5 7 9 8 6 4 2
_____________________________________________
輸入說明：
第一行為一個整數M (1 <= M <= 10)，代表接下來要輸入M個整數。
第二行到第M+1行，每一行皆輸入一個整數N，N的數值範圍為 1 <= N <= 1000。
輸出說明：:
輸出按照題目規則進行排序的List內容，List的元素之間以一個空格隔開。
若M不在[1, 10]內，則輸出ERROR並直接結束程式，不須等待輸入N。
若N不在[1, 1000]內，則輸出ERROR並直接結束程式。
______________________________________________
範例輸入1：
7
999
104
99
103
9
567
43
範例輸出1：
9 43 99 103 567 999 104
______________________________________________
範例輸入2：
4
888
222
666
444
範例輸出2：
888 666 444 222
______________________________________________
範例輸入3：
0
範例輸出3：
ERROR
______________________________________________
範例輸入4：
2
1001
範例輸出4：
ERROR
"""

def numSequence():
    n = int(input())
    flag = True
    if 1 <= n <= 10:
        nList = []
        for i in range(n):
            m = int(input())
            if 1 <= m <= 1000:
                nList.append(m)
            else:
                flag = False
                break
        if flag:
            rightlist = []
            leftlist = []
            for j in nList:
                if j % 2 == 0:
                    rightlist.append(j)
                else:
                    leftlist.append(j)
            leftlist.sort()
            rightlist.sort(reverse=True)
            leftlist.extend(rightlist)
            print(*leftlist,'')
        else:
            print('ERROR')
    else:
        print('ERROR')

if __name__ == '__main__':
    numSequence()